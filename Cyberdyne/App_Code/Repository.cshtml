@functions{
    public class Robot
    {
        private int robotId;
        private string robotName;
        private string robotText;
        private int coverImage;

        public int RobotId
        {
            get{return robotId;}
        }
        public string RobotName 
        {
            get{return robotName;} 
            set{
                var db = Database.Open(App.DataBase);
                robotName = value;
                db.Execute("UPDATE Robots SET RobotName = @0 WHERE RobotId = @1", value, robotId);
                db.Close();
            }
        }
        public string RobotText
        {
            get{return robotText;}
            set{
                var db = Database.Open(App.DataBase);
                robotText = value;
                db.Execute("UPDATE Robots SET RobotText = @0 WHERE RobotId = @1", value, robotId);
                db.Close();
            }
        }
        public int CoverImage
        {
            get{return coverImage;}
            set{
                var db = Database.Open(App.DataBase);
                coverImage = value;
                db.Execute("UPDATE Robots SET PhotoId = @0 WHERE RobotId = @1", value, robotId);
                db.Close();
            }
        }

        public Robot(int robotId, string robotName, string robotText, int coverImage)
        {
            this.robotId = robotId;
            this.robotName = robotName;
            this.robotText = robotText;
            this.coverImage = coverImage;
        }

        //return list with photo links corresponded with this robot
        public List<int> getPhotos()
        {
            List<int> PhotoIDs = new List<int>();
            var db = Database.Open(App.DataBase);
            var IDs = db.Query("SELECT PhotoId FROM PhotoReference WHERE RobotId = @0", robotId);
            foreach(var row in IDs)
            {
                PhotoIDs.Add(row.PhotoId);
            }
            db.Close();
            return PhotoIDs;
        }

        //return list with links to code
        public List<string[]> getCodeLinks()
        {
            List<string[]> links = new List<string[]>();
            var db = Database.Open(App.DataBase);

            var data = db.Query("SELECT Id, link FROM CodeLinks WHERE RobotId = @0", robotId);
            foreach(var row in data)
            {
                links.Add(new string[]{Convert.ToString(row.Id), Repository.makeLink(row.link)});
            }

            db.Close();
            return links;
        }

        //retrun list with codesnippets
        public List<string[]> getCodeSnippets()
        {
            List<string[]> links = new List<string[]>();
            var db = Database.Open(App.DataBase);

            var data = db.Query("SELECT Id, Text FROM CodeSnippets WHERE RobotId = @0", robotId);
            foreach(var row in data)
            {
                links.Add(new string[]{Convert.ToString(row.Id), row.Text});
            }

            db.Close();
            return links;
        }

        //return list with video links
        public List<string[]> getVideoLinks()
        {
            List<string[]> links = new List<string[]>();
            var db = Database.Open(App.DataBase);

            var data = db.Query("SELECT Id, link FROM VideoLinks WHERE RobotId = @0", robotId);
            foreach(var row in data)
            {
                links.Add(new string[]{Convert.ToString(row.Id), Repository.makeLink(row.link)});
            }

            db.Close();
            return links;
        }

        //return list with 3D links
        public List<string[]> getThreeDLinks()
        {
            List<string[]> links = new List<string[]>();
            var db = Database.Open(App.DataBase);

            var data = db.Query("SELECT Id, link FROM ThreeDFiles WHERE RobotId = @0", robotId);
            foreach(var row in data)
            {
                links.Add(new string[]{Convert.ToString(row.Id), Repository.makeLink(row.link)});
            }

            db.Close();
            return links;
        }

        //return parts
        public List<Part> getParts()
        {
            List<Part> partList = new List<Part>();
            var db = Database.Open(App.DataBase);
            var partIds = db.Query("SELECT PartId FROM PartReference WHERE RobotId = @0", robotId);
            foreach(var part in partIds)
            {
                var partData = db.QuerySingle("SELECT * FROM Parts WHERE PartId = @0", part.PartId);
                partList.Add(new Part(partData.PartId, partData.PartName, partData.PartNo, partData.PhotoId));
            }
            db.Close();
            return partList;
        }

        //check if robot is favourite
        public bool isFavourite()
        {
            var db = Database.Open(App.DataBase);
            var fav = db.QueryValue("SELECT RobotId FROM FavouriteRobot");
            db.Close();
            if(fav == RobotId)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        //return if the robot already has a given photo
        public bool hasPhoto(int photoId)
        {
            var db = Database.Open(App.DataBase);
            var photo = db.QuerySingle("SELECT * FROM PhotoReference WHERE PhotoId = @0 AND RobotId = @1", photoId, robotId);
            db.Close();
            if(photo != null)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public void addPhoto(int photoId)
        {
            var db = Database.Open(App.DataBase);
            var photo = db.QuerySingle("SELECT PhotoId FROM Photos WHERE PhotoId = @0", photoId);
            if(photo != null && !hasPhoto(photoId)) 
            {
                db.Execute("INSERT INTO PhotoReference (PhotoId, RobotId) VALUES (@0, @1)", photoId, robotId);
            }
            db.Close();
        }

        public void removePhoto(int photoId)
        {
            var db = Database.Open(App.DataBase);
            db.Execute("DELETE FROM PhotoReference WHERE PhotoId = @0 AND RobotId = @1", photoId, robotId);
            db.Close();
        }
    }

    public class Part
    {
        private int partId;
        private string partName;
        private string partNo;
        private int coverPhoto;

        public int PartId
        {
            get{return partId;}
        }
        public string PartName
        {
            get{return partName;}
            set{
                var db = Database.Open(App.DataBase);
                partName = value;
                db.Execute("UPDATE Parts SET PartName = @0 WHERE PartId = @1", value, partId);
                db.Close();
            }
        }
        public string PartNo 
        {
            get{return partNo;}
            set{
                var db = Database.Open(App.DataBase);
                partNo = value;
                db.Execute("UPDATE Parts SET PartNo = @0 WHERE PartId = @1", value, partId);
                db.Close();
            }
        }
        public int CoverPhoto 
        {
            get{return coverPhoto;}
            set{
                var db = Database.Open(App.DataBase);
                int currentId = coverPhoto;
                db.Execute("UPDATE Parts SET PhotoId = @0 WHERE PartId = @1", value, partId);
                    if(currentId != 1)
                    {
                        db.Execute("DELETE FROM Photos WHERE PhotoId = @0", currentId);   
                    }
                db.Close();
            }
        }

        public Part(int partId, string partName, string partNo, int coverPhoto)
        {
            this.partId = partId;
            this.partName = partName;
            this.partNo = partNo;
            this.coverPhoto = coverPhoto;
        }

        public List<Vendor> getVendors()
        {
            List<Vendor> tempList = new List<Vendor>();
            var db = Database.Open(App.DataBase);
            var vendorData = db.Query("SELECT * FROM Vendors WHERE PartId = @0", partId);
            foreach(var row in vendorData)
            {
                tempList.Add(new Vendor(row.VendorName, row.VendorLink, (float)row.Price, row.PartId, row.PurchaseLink, row.VendorId));
            }
            db.Close();
            return tempList;
        }

        public void addVendor(string name, string link, float price, string purchaseLink)
        {
            var db = Database.Open(App.DataBase);
            db.Execute("INSERT INTO Vendors (VendorName, VendorLink, Price, PurchaseLink, PartId) VALUES (@0, @1, @2, @3, @4)", name, Repository.makeLink(link), price, Repository.makeLink(purchaseLink), partId);
            db.Close();
        }

        public int getQuantity(int robotId)
        {
            var db = Database.Open(App.DataBase);
            var quantity = db.QueryValue("SELECT Quantity FROM PartReference WHERE PartId = @0 AND RobotId = @1", partId, robotId);
            db.Close();
            if(quantity != null)
            {
                return Convert.ToInt32(quantity);
            }
            else
            {
                return 0;
            }
        }

        public void setQuantity(int robotId, int quantity)
        {
            var db = Database.Open(App.DataBase);
            db.Execute("UPDATE PartReference SET Quantity = @0 WHERE RobotId = @1 AND PartId = @2", quantity, robotId, partId);
            db.Close();
        }        
    }

    public class Vendor
    {
        private string name;
        private string link;
        private float price;
        private int partId;
        private string purchaseLink;
        private int vendorId;

        public string Name
        {
            get{return name;}
            set{
                var db = Database.Open(App.DataBase);
                name = value;
                db.Execute("UPDATE Vendors SET VendorName = @0 WHERE VendorId = @1", value, vendorId);
                db.Close();
            }
        }

        public string Link
        {
            get{return link;}
            set{
                var db = Database.Open(App.DataBase);
                link = value;
                db.Execute("UPDATE Vendors SET VendorLink = @0 WHERE VendorId = @1", Repository.makeLink(link), vendorId);
                db.Close();
            }
        }

        public float Price
        {
            get{return price;}
            set{
                var db = Database.Open(App.DataBase);
                price = value;
                db.Execute("UPDATE Vendors SET Price = @0 WHERE VendorId = @1", value, vendorId);
                db.Close();
            }
        }

        public string PurchaseLink
        {
            get{return purchaseLink;}
            set{
                var db = Database.Open(App.DataBase);
                purchaseLink = value;
                db.Execute("UPDATE Vendors SET PurchaseLink = @0 WHERE VendorId = @1", Repository.makeLink(purchaseLink), vendorId);
                db.Close();
            }
        }

        public int PartId
        {
            get{return partId;}
        }

        public int VendorId
        {
            get{return vendorId;}
        }



        public Vendor(string name, string link, float price, int partId, string purchaseLink, int vendorId)
        {
            this.name = name;
            this.link = Repository.makeLink(link);
            this.price = price;
            this.partId = partId;
            this.purchaseLink = Repository.makeLink(purchaseLink);
            this.vendorId = vendorId;
        }
    }

    public static Robot getRobot(int robotId)
    {
        var db = Database.Open(App.DataBase);
        var robotQuery = db.QuerySingle("SELECT * FROM Robots WHERE RobotId = @0", robotId);
        if(robotQuery != null)
        {
            Robot robotObject = new Robot(robotId, robotQuery.RobotName, robotQuery.RobotText, robotQuery.PhotoId);
            db.Close();
            return robotObject;
        }
        db.Close();
        return null;
    }

    public static List<Robot> getLastRobots()
    {
        var db = Database.Open(App.DataBase);
        List<Robot> robotList = new List<Robot>();
        var subQuery1 = db.QueryValue("SELECT MAX(RobotID) FROM Robots");
        var subQuery2 = db.QueryValue("SELECT MAX(RobotID) FROM Robots WHERE RobotId != @0", subQuery1);
        var robotQuery = db.Query("SELECT * FROM Robots WHERE RobotId = @0 OR RobotId = @1 ORDER BY RobotID DESC", subQuery1, subQuery2);
        foreach(var row in robotQuery)
        {
            robotList.Add(new Robot(row.RobotId, row.RobotName, row.RobotText, row.PhotoId));
        }
        db.Close();
        return robotList;
    }

    public static List<Robot> getAllRobots()
    {
        var db = Database.Open(App.DataBase);
        List<Robot> robotList = new List<Robot>();
        var robotQuery = db.Query("SELECT * FROM Robots");
        foreach(var row in robotQuery)
        {
            robotList.Add(new Robot(row.RobotId, row.RobotName, row.RobotText, row.PhotoId));
        }
        db.Close();
        return robotList;
    }

    public static Part getPart(int partId)
    {
        var db = Database.Open(App.DataBase);
        var partData = db.QuerySingle("SELECT * FROM Parts WHERE PartId = @0", partId);
        if(partData != null)
        {
            Part tempPart = new Part(partId, partData.PartName, partData.PartNo, partData.PhotoId);
            db.Close();
            return tempPart;
        }
        db.Close();
        return null;
    }

    public static List<Part> getAllParts()
    {
        var db = Database.Open(App.DataBase);
        List<Part> partList = new List<Part>();
        var partData = db.Query("SELECT * FROM Parts");
        foreach(var row in partData)
        {
            partList.Add(new Part(row.PartId, row.PartName, row.PartNo, row.PhotoId));
        }
        db.Close();
        return partList;
    }

    public static string getTextElement(int elementId)
    {
        var db = Database.Open(App.DataBase);
        var textData = db.QuerySingle("SELECT ElementText FROM TextElements WHERE ElementId = @0", elementId);
        if(textData != null)
        {
            db.Close();
            return textData.ElementText;
        }
        db.Close();
        return "";
    }

    public static Vendor getVendor(int vendorId)
    {
        var db = Database.Open(App.DataBase);
        var vendorData = db.QuerySingle("SELECT * FROM Vendors WHERE VendorId = @0", vendorId);
        Vendor tempVendor = new Vendor(vendorData.VendorName, vendorData.VendorLink, (float)vendorData.Price, vendorData.PartId, vendorData.PurchaseLink, vendorData.VendorId);
        db.Close();
        return tempVendor;
    }

    public static Robot getFavRobot() 
    {
        var db = Database.Open(App.DataBase);
        if(db.QuerySingle("SELECT RobotId FROM FavouriteRobot") != null)
        {
            var favId = (int)db.QueryValue("SELECT RobotId FROM FavouriteRobot");
            var robotData = db.QuerySingle("SELECT * FROM Robots WHERE RobotId = @0", favId);
            Robot favRobot = new Robot(favId, robotData.RobotName, robotData.RobotText, robotData.PhotoId);
            db.Close();
            return favRobot;
        }
        db.Close();
        return null;
    }

    public static string[] Names()
    {
        string[] names = new string[]{"Schweizer", "Easter", "Bunny", "Schweizenator"};
        return names;
    }
    
    public static string makeLink(string link)
    {
        if(isValidLink(link))
        {
            return link;
        }
        UriBuilder newUri = new UriBuilder("http", link);
        if(isValidLink(newUri.ToString()))
        {
            return newUri.ToString();
        }
        return "";
    }

    public static bool isValidLink(string link)
    {
        Uri result;
        bool uriValid = Uri.TryCreate(link, UriKind.Absolute, out result) && (result.Scheme == Uri.UriSchemeHttp || result.Scheme == Uri.UriSchemeHttps);
        return uriValid;
    }

    public static List<int> getAllPhotos()
    {
        var db = Database.Open(App.DataBase);
        List<int> tempList = new List<int>();
        
        var queryData = db.Query("SELECT PhotoId FROM Photos WHERE PhotoId != 1");

        foreach(var photo in queryData)
        {
            var partPhoto = db.QuerySingle("SELECT PhotoId FROM Parts WHERE PhotoId = @0", photo.PhotoId);
            if(partPhoto == null)
            {
                tempList.Add(photo.PhotoId);
            }
        }
        db.Close(); 
        return tempList;
    }

    public static string getBackgroundForUser()
    {
        string background = "";
        string type = "";
        HttpCookie rqstCookie = Request.Cookies.Get("UserSettings");
        if(rqstCookie != null && !string.IsNullOrEmpty(rqstCookie.Values["Background"]))
        {
            switch(rqstCookie.Values["Background"])
            {
                default:
                case "default":
                    background = "url('/Cyberdyne background.jpg')";
                    type = "background-image";
                    break;
                case "amazing":
                    background = "url('/Schweizerdyne.jpg')";
                    type = "background-image";
                    break; 
                case "fabulousPink":
                    background = "#E91E63";
                    type = "background";
                    break;   
                case "yellow":
                    background = "#FFFF00";
                    type = "background";
                    break;              
            }
        }
        return background = string.Format("{0}: {1};", type, background);
    }

    public static string getFontForUser()
    {
        string font = "";
        HttpCookie rqstCookie = Request.Cookies.Get("UserSettings");
        if(rqstCookie != null && !string.IsNullOrEmpty(rqstCookie.Values["Font"]))
        {
            font = rqstCookie["Font"] + ", sans-serif";
        }
        return string.Format("font-family: {0};", font);
    }

    public static void createCookie(string cookieName, string cookieKey, string cookieContent, double daysValid)
    {
        HttpCookie myCookie;
        if(Request.Cookies.Get(cookieName) != null)
        {
            myCookie = Request.Cookies.Get(cookieName);
        }
        else
        {
            myCookie = new HttpCookie(cookieName);
        }
        myCookie.Values[cookieKey] = cookieContent;
        myCookie.Path = "/";
        myCookie.Expires = DateTime.Now.AddDays(daysValid);
        Response.Cookies.Add(myCookie);
    }
}