@using System.IO
@{
    Layout = "~/_Layout.cshtml";
    
    var robotId = "";
    var robotName = "";
    var mainPhoto = "";
    var robotText = "";
    List<string> photos = new List<string>();
    List<int> photoIds = new List<int>();
    List<string[]> codeLinks = new List<string[]>();
    List<string[]> codeSnippets = new List<string[]>();
    List<string[]> threeDLinks = new List<string[]>();
    List<string[]> videoLinks = new List<string[]>();
    List<Repository.Part> parts = new List<Repository.Part>();

    var input = "";
    var element = "";
    var elementPhoto = "";

    var fileName = "";
    var fileMime = "";
    int id = 0;

    if(!Request.QueryString["ID"].IsEmpty() && Request.QueryString["ID"].IsInt()) {
        robotId = Request.QueryString["ID"];

        Repository.Robot tempRobot = Repository.getRobot(Convert.ToInt16(robotId));
        if (tempRobot != null)
        {
            robotName = tempRobot.RobotName;
            mainPhoto = tempRobot.CoverImage;
            robotText = tempRobot.RobotText;
            photos = tempRobot.getPhotos();
            photoIds = tempRobot.getPhotoIds();
            codeLinks = tempRobot.getCodeLinks();
            codeSnippets = tempRobot.getCodeSnippets();
            threeDLinks = tempRobot.getThreeDLinks();
            videoLinks = tempRobot.getVideoLinks();
            parts = tempRobot.getParts();
        }
        else
        {
            Validation.AddFormError("BEEP BOOP. Robot is lost.");
        }
    }
    else{
        Validation.AddFormError("BEEP BOOP. Robot is lost.");
    }

    if(IsPost && !Request.Form["editMain"].IsEmpty())
    {
        Validation.RequireField("name", "You must enter a name");
        
        robotName = Request.Form["name"];
        robotText = Request.Form["robotText"];
        mainPhoto = Request.Form["photo"];

        if(Validation.IsValid()){
            var db = Database.Open("basicData");
            if (mainPhoto.Length == 0)
            {
                mainPhoto = "1";
            }
            if (robotText.Length == 0)
            {
                robotText = null;
            }
            var updateCommand = "UPDATE Robots SET RobotName=@0, RobotText=@1, PhotoId=@2 WHERE RobotId=@3";
            db.Execute(updateCommand, robotName, robotText, mainPhoto, robotId);
            db.Close();
            Response.Redirect(Request.Url.AbsoluteUri);
        }
    }
    if(IsPost && !Request.Form["favourite"].IsEmpty())
    {
        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var deleteCommand = "DELETE FROM FavouriteRobot";
            var insertCommand = "INSERT INTO FavouriteRobot (RobotId) VALUES(@0)";
            db.Execute(deleteCommand);
            db.Execute(insertCommand, robotId);
        }
    }
    if(IsPost && !Request.Form["editCodeLink"].IsEmpty())
    {
        Validation.RequireField("linkEdit", "Please enter something");

        input = Request.Form["input"];
        element = Request.Form["element"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var updateCommand = "UPDATE CodeLinks SET link=@0 WHERE Id=@1";
            db.Execute(updateCommand, input, element);

            Response.Redirect(Request.Url.AbsoluteUri);
        }
    }
    if(IsPost && !Request.Form["deleteCodeLink"].IsEmpty())
    {
        element = Request.Form["element"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var deleteCommand = "DELETE FROM CodeLinks WHERE Id=@0";
            db.Execute(deleteCommand, element);

            Response.Redirect(Request.Url.AbsoluteUri);
        }
    }
    if(IsPost && !Request.Form["addCodeLink"].IsEmpty())
    {
        Validation.RequireField("linkAdd", "Please enter something");

        input = Request.Form["input"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var insertCommand = "INSERT INTO CodeLinks (RobotId, link) VALUES(@0,@1)";
            db.Execute(insertCommand, robotId, input);

            Response.Redirect(Request.Url.AbsoluteUri);
        }
    }


    if(IsPost && !Request.Form["editCodeSnippet"].IsEmpty())
    {
        Validation.RequireField("snippetEdit", "Please enter something");

        input = Request.Form["input"];
        element = Request.Form["element"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var updateCommand = "UPDATE CodeSnippets SET Text=@0 WHERE Id=@1";
            db.Execute(updateCommand, input, element);

            Response.Redirect(Request.Url.AbsoluteUri);
        }
    }
    if(IsPost && !Request.Form["deleteCodeSnippet"].IsEmpty())
    {
        element = Request.Form["element"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var deleteCommand = "DELETE FROM CodeSnippets WHERE Id=@0";
            db.Execute(deleteCommand, element);

            Response.Redirect(Request.Url.AbsoluteUri);
        }
    }
    if(IsPost && !Request.Form["addCodeSnippet"].IsEmpty())
    {
        Validation.RequireField("snippetAdd", "Please enter something");

        input = Request.Form["input"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var insertCommand = "INSERT INTO CodeSnippets (RobotId, Text) VALUES(@0,@1)";
            db.Execute(insertCommand, robotId, input);

            Response.Redirect(Request.Url.AbsoluteUri);
        }
    }


    if(IsPost && !Request.Form["editThreeDLink"].IsEmpty())
    {
        Validation.RequireField("threeDEdit", "Please enter something");

        input = Request.Form["input"];
        element = Request.Form["element"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var updateCommand = "UPDATE ThreeDFiles SET link=@0 WHERE Id=@1";
            db.Execute(updateCommand, input, element);

            Response.Redirect(Request.Url.AbsoluteUri);
        }
    }
    if(IsPost && !Request.Form["deleteThreeDLink"].IsEmpty())
    {
        element = Request.Form["element"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var deleteCommand = "DELETE FROM ThreeDFiles WHERE Id=@0";
            db.Execute(deleteCommand, element);

            Response.Redirect(Request.Url.AbsoluteUri);
        }
    }
    if(IsPost && !Request.Form["addThreeDLink"].IsEmpty())
    {
        Validation.RequireField("threeDAdd", "Please enter something");

        input = Request.Form["input"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var insertCommand = "INSERT INTO ThreeDFiles (RobotId, link) VALUES(@0,@1)";
            db.Execute(insertCommand, robotId, input);

            Response.Redirect(Request.Url.AbsoluteUri);
        }
    }


    if(IsPost && !Request.Form["editVideoLink"].IsEmpty())
    {
        Validation.RequireField("videoEdit", "Please enter something");

        input = Request.Form["input"];
        element = Request.Form["element"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var updateCommand = "UPDATE VideoLinks SET link=@0 WHERE Id=@1";
            db.Execute(updateCommand, input, element);

            Response.Redirect(Request.Url.AbsoluteUri);
        }
    }
    if(IsPost && !Request.Form["deleteVideoLink"].IsEmpty())
    {
        element = Request.Form["element"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var deleteCommand = "DELETE FROM VideoLinks WHERE Id=@0";
            db.Execute(deleteCommand, element);

            Response.Redirect(Request.Url.AbsoluteUri);
        }
    }
    if(IsPost && !Request.Form["addVideoLink"].IsEmpty())
    {
        Validation.RequireField("videoAdd", "Please enter something");

        input = Request.Form["input"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var insertCommand = "INSERT INTO VideoLinks (RobotId, link) VALUES(@0,@1)";
            db.Execute(insertCommand, robotId, input);

            Response.Redirect(Request.Url.AbsoluteUri);
        }
    }


    if(IsPost && !Request["deletePhoto"].IsEmpty())
    {
        element = Request.Form["element"];

        if(Validation.IsValid() && element != "1")
        {
            var db = Database.Open("basicData");
            var deleteCommand = "DELETE FROM Photos WHERE PhotoId=@0";
            var deleteCommand2 = "DELETE FROM PhotoReference WHERE PhotoId=@0";
            db.Execute(deleteCommand2, element);
            db.Execute(deleteCommand, element);

            Response.Redirect(Request.Url.AbsoluteUri);
        }
    }
    if(IsPost && !Request.Form["addPhoto"].IsEmpty())
    {
        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            if(Request.Files[0].FileName == string.Empty){Validation.AddFormError("You must attach at least one image");}
            for(int imageCount = 0; imageCount < Request.Files.Count; imageCount++)
            {
                var uploadedFile = Request.Files[imageCount];
                fileName = Path.GetFileName(uploadedFile.FileName);
                if(fileName != String.Empty)
                {
                    fileMime = uploadedFile.ContentType;
                    if(fileMime.StartsWith("image"))
                    {
                        var fileStream = uploadedFile.InputStream;
                        var fileLength = uploadedFile.ContentLength;                       
                        byte[] fileContent = new byte[fileLength];
                        fileStream.Read(fileContent, 0, fileLength);
                        var sql = "INSERT INTO Photos (Photo, MimeType) VALUES (@0, @1)";
                        db.Execute(sql, fileContent, fileMime);
                        id = (int)db.GetLastInsertId();
                        db.Execute("INSERT INTO PhotoReference (RobotID, PhotoID) VALUES (@0,@1)", robotId, id );
                    }
                }
            }

            Response.Redirect(Request.Url.AbsoluteUri);
        }
    }

    Page.Title = String.Format("Edit {0}", robotName);
}



<div class="col-md-12">
<h1>Edit robot</h1>
    <form method="post" class="form-inline"> @* mist nog form ID *@
        <fieldset>
            @AntiForgery.GetHtml()
            @Html.ValidationSummary("Login was unsuccessful. Please correct the errors and try again", excludeFieldErrors: true, htmlAttributes: null)
            <div class="form-group">
                <label for="robotName">Name</label></br>
                <input type="text" id="name" name="name" value="@robotName" class="form-control">
                @Html.ValidationMessage("name")
            </div>
        </fieldset>
        <fieldset>
            <div class="form-group">
                <label for="robotText">Text</label></br>
                <textarea onkeyup="textCounter(this, 'counter',4000);" id="robotText" name="robotText" class="form-control col-md-12" rows="8" cols="50">@robotText</textarea>
                @*<textarea id="robotDescription" name="robotDescription" class="form-control">@robotDescription</textarea>*@
                    @Html.ValidationMessage("robotText")
            </div>
        </fieldset>
        <fieldset>
            <label>Pick a cover image</label></br>
            <button type="button" class="btn btn-info" data-toggle="collapse" data-target="#PhotoToggle">Toggle photos</button>
            <div id="PhotoToggle" class="collapse">
                @foreach (var photo in photos)
                {
                    <div class="form-group">
                        @if(photo == mainPhoto)
                        {
                             <input type="radio" id="photo" name="photo" value="@photo.Substring(23)" checked class="form-control">
                        }
                        else
                        {
                            <input type="radio" id="photo" name="photo" value="@photo.Substring(23)" class="form-control">
                        }
                        <img src="~/@photo" alt="photo" width="250px" height="250px" />
                    </div>
                }
            </div>
            
        </fieldset>
        <fieldset>
            <div class="form-group">
                <input type="submit" id="submit" name="editMain" value="Edit" class="btn btn-default">
            </div>
        </fieldset>
    </form>
</div>

<div class="col-md-12">
    <form method="post" class="form-inline">
        <fieldset>
            <label>Make this robot your favourite!</label></br>
            <div class="form-group">
                <input type="submit" id="submit" name="favourite" value="Favourite" class="btn btn-default">
            </div>
        </fieldset>
    </form>
    <label>View parts for this robot</label></br>
    <p>@parts.Count Part(s) have been added</p>
    <a href="~/Admin/Tools/Viewparts?Id=@robotId" class="btn btn-default">Edit Parts</a>
</div>

<div class="col-md-12">
    <h2>Links</h2>
    <ul class="nav nav-tabs">
        <li class="active"><a data-toggle="tab" href="#Link_plus">+</a></li>
        @for (int i = 1; i <= codeLinks.Count; i++)
        {
            <li><a data-toggle="tab" href="#Link_@i">@i</a></li>
        }
    </ul>

    <div class="tab-content">
        <div id="Link_plus" class="tab-pane fade in active">
            <form method="post" class="form-inline">
                @AntiForgery.GetHtml()
                @Html.ValidationSummary("Login was unsuccessful. Please correct the errors and try again", excludeFieldErrors: true, htmlAttributes: null)
                <div class="form-group">
                    <input type="text" id="input" name="input" value="" class="form-control">
                    <input type="submit" id="submit" name="addCodeLink" value="Add" class="btn btn-default">
                    @Html.ValidationMessage("linkAdd")
                </div>
            </form>
        </div>
        @for (int i = 1; i <= codeLinks.Count; i++)
        {
            <div id="Link_@i" class="tab-pane fade">
                @AntiForgery.GetHtml()
                @Html.ValidationSummary("Login was unsuccessful. Please correct the errors and try again", excludeFieldErrors: true, htmlAttributes: null)
                <form method="post" class="form-inline">
                    <div class="form-group">
                        <input type="text" id="input" name="input" value="@codeLinks[i-1][1]" class="form-control">
                        <input type="hidden" name="element" value="@codeLinks[i-1][0]">
                        <input type="submit" id="submit" name="editCodeLink" value="Edit" class="btn btn-default">
                        <input type="submit" id="submit" name="deleteCodeLink" value="Delete" class="btn btn-default">
                        @Html.ValidationMessage("linkEdit")
                    </div>
                </form>
            </div>
        }
    </div>


    <h2>Code snippets</h2>
    <ul class="nav nav-tabs">
        <li class="active"><a data-toggle="tab" href="#Snippet_plus">+</a></li>
        @for (int i = 1; i <= codeSnippets.Count; i++)
        {
            <li><a data-toggle="tab" href="#Snippet_@i">@i</a></li>
        }
    </ul>

    <div class="tab-content">
        <div id="Snippet_plus" class="tab-pane fade in active">
            <form method="post" class="form-inline">
                @AntiForgery.GetHtml()
                @Html.ValidationSummary("Login was unsuccessful. Please correct the errors and try again", excludeFieldErrors: true, htmlAttributes: null)
                <div class="form-group">
                    <textarea onkeyup="textCounter(this, 'counter',4000);" id="robotText" name="robotText" class="form-control col-md-12" rows="8" cols="50"></textarea>
                    <input type="submit" id="submit" name="addCodeSnippet" value="Add" class="btn btn-default">
                    @Html.ValidationMessage("snippetAdd")
                </div>
            </form>
        </div>
        @for (int i = 1; i <= codeSnippets.Count; i++)
        {
            <div id="Snippet_@i" class="tab-pane fade">
                <form method="post" class="form-inline">
                    @AntiForgery.GetHtml()
                    @Html.ValidationSummary("Login was unsuccessful. Please correct the errors and try again", excludeFieldErrors: true, htmlAttributes: null)
                    <div class="form-group">
                        <textarea onkeyup="textCounter(this, 'counter',4000);" id="robotText" name="robotText" class="form-control col-md-12" rows="8" cols="50">@codeSnippets[i-1][1]</textarea>
                        <input type="hidden" name="element" value="@codeSnippets[i-1][0]">
                        <input type="submit" id="submit" name="editCodeSnippet" value="Edit" class="btn btn-default">
                        <input type="submit" id="submit" name="deleteCodeSnippet" value="Delete" class="btn btn-default">
                        @Html.ValidationMessage("snippetEdit")
                    </div>
                </form>
            </div>
        }
    </div>


    <h2>3D links</h2>
    <ul class="nav nav-tabs">
        <li class="active"><a data-toggle="tab" href="#ThreeD_plus">+</a></li>
        @for (int i = 1; i <= threeDLinks.Count; i++)
        {
            <li><a data-toggle="tab" href="#ThreeD_@i">@i</a></li>
        }
    </ul>

    <div class="tab-content">
        <div id="ThreeD_plus" class="tab-pane fade in active">
            <form method="post" class="form-inline">
                @AntiForgery.GetHtml()
                @Html.ValidationSummary("Login was unsuccessful. Please correct the errors and try again", excludeFieldErrors: true, htmlAttributes: null)
                <div class="form-group">
                    <input type="text" id="input" name="input" value="" class="form-control">
                    <input type="submit" id="submit" name="addThreeDLink" value="Add" class="btn btn-default">
                    @Html.ValidationMessage("threeDAdd")
                </div>
            </form>
        </div>
        @for (int i = 1; i <= threeDLinks.Count; i++)
        {
            <div id="ThreeD_@i" class="tab-pane fade">
                <form method="post" class="form-inline">
                    @AntiForgery.GetHtml()
                    @Html.ValidationSummary("Login was unsuccessful. Please correct the errors and try again", excludeFieldErrors: true, htmlAttributes: null)
                    <div class="form-group">
                        <input type="text" id="input" name="input" value="@threeDLinks[i-1][1]" class="form-control">
                        <input type="hidden" name="element" value="@threeDLinks[i-1][0]">
                        <input type="submit" id="submit" name="editThreeDLink" value="Edit" class="btn btn-default">
                        <input type="submit" id="submit" name="deleteThreeDLink" value="Delete" class="btn btn-default">
                        @Html.ValidationMessage("threeDEdit")
                    </div>
                </form>
            </div>
        }
    </div>


    <h2>Video links</h2>
    <ul class="nav nav-tabs">
        <li class="active"><a data-toggle="tab" href="#Video_plus">+</a></li>
        @for (int i = 1; i <= videoLinks.Count; i++)
        {
            <li><a data-toggle="tab" href="#Video_@i">@i</a></li>
        }
    </ul>

    <div class="tab-content">
        <div id="Video_plus" class="tab-pane fade in active">
            <form method="post" class="form-inline">
                @AntiForgery.GetHtml()
                @Html.ValidationSummary("Login was unsuccessful. Please correct the errors and try again", excludeFieldErrors: true, htmlAttributes: null)
                <div class="form-group">
                    <input type="text" id="input" name="input" value="" class="form-control">
                    <input type="submit" id="submit" name="addVideoLink" value="Add" class="btn btn-default">
                    @Html.ValidationMessage("videoAdd")
                </div>
            </form>
        </div>
        @for (int i = 1; i <= videoLinks.Count; i++)
        {
            <div id="Video_@i" class="tab-pane fade">
                <form method="post" class="form-inline">
                    @AntiForgery.GetHtml()
                    @Html.ValidationSummary("Login was unsuccessful. Please correct the errors and try again", excludeFieldErrors: true, htmlAttributes: null)
                    <div class="form-group">
                        <input type="text" id="input" name="input" value="@videoLinks[i-1][1]" class="form-control">
                        <input type="hidden" name="element" value="@videoLinks[i-1][0]">
                        <input type="submit" id="submit" name="editVideoLink" value="Edit" class="btn btn-default">
                        <input type="submit" id="submit" name="deleteVideoLink" value="Delete" class="btn btn-default">
                        @Html.ValidationMessage("videoEdit")
                    </div>
                </form>
            </div>
        }
    </div>


    <h2>Photos</h2>
    <ul class="nav nav-tabs">
        <li class="active"><a data-toggle="tab" href="#Photo_plus">+</a></li>
        @for (int i = 1; i <= photoIds.Count; i++)
        {
            <li><a data-toggle="tab" href="#Photo_@i">@i</a></li>
        }
    </ul>

    <div class="tab-content">
        <div id="Photo_plus" class="tab-pane fade in active">
            <form method="post" class="form-inline" enctype="multipart/form-data">
                @AntiForgery.GetHtml()
                @Html.ValidationSummary("Login was unsuccessful. Please correct the errors and try again", excludeFieldErrors: true, htmlAttributes: null)
                <div class="form-group">  
                    <div>
                        @FileUpload.GetHtml(
                        initialNumberOfFiles:1,
                        allowMoreFilesToBeAdded:true,
                        includeFormTag:false,
                        uploadText: "Upload2",
                        name: "Upload2")
                    </div>
                    <input type="submit" id="submit" name="addPhoto" value="Add" class="btn btn-default">
                </div>
            </form>
        </div>
        @for (int i = 1; i <= photoIds.Count; i++)
        {
            <div id="Photo_@i" class="tab-pane fade">
                <form method="post" class="form-inline">
                    @AntiForgery.GetHtml()
                    @Html.ValidationSummary("Login was unsuccessful. Please correct the errors and try again", excludeFieldErrors: true, htmlAttributes: null)
                    <div class="form-group">
                        <img src="~/@photos[i-1]" alt="photo" id="photo" class="img-responsive" />
                        <input type="hidden" name="element" value="@photoIds[i-1]">
                        <input type="hidden" name="elementPhoto" value="@photos[i-1]">
                        <input type="submit" id="submit" name="deletePhoto" value="Delete" class="btn btn-default">
                    </div>
                </form>
            </div>
        }
    </div>
</div>
