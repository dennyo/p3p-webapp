@{
    Layout = "~/_Layout.cshtml";
    
    var robotId = "";
    var robotName = "";
    var mainPhoto = "";
    var robotText = "";
    List<string> photos = new List<string>();
    List<string[]> codeLinks = new List<string[]>();
    List<string[]> codeSnippets = new List<string[]>();
    List<string[]> threeDLinks = new List<string[]>();
    List<string[]> videoLinks = new List<string[]>();

    var input = "";
    var element = "";

    if(!Request.QueryString["ID"].IsEmpty() && Request.QueryString["ID"].IsInt()) {
        robotId = Request.QueryString["ID"];

        Repository.Robot tempRobot = Repository.getRobot(Convert.ToInt16(robotId));
        if (tempRobot != null)
        {
            robotName = tempRobot.RobotName;
            mainPhoto = tempRobot.CoverImage;
            robotText = tempRobot.RobotText;
            photos = tempRobot.getPhotos();
            codeLinks = tempRobot.getCodeLinks();
            codeSnippets = tempRobot.getCodeSnippets();
            threeDLinks = tempRobot.getThreeDLinks();
            videoLinks = tempRobot.getVideoLinks();
        }
        else
        {
            Validation.AddFormError("BEEP BOOP. Robot is lost.");
        }
    }
    else{
        Validation.AddFormError("BEEP BOOP. Robot is lost.");
    }

    if(IsPost && !Request["submit1"].IsEmpty())
    {
        Validation.RequireField("name", "You must enter a name");
        
        robotName = Request.Form["name"];
        robotText = Request.Form["robotText"];
        mainPhoto = Request.Form["photo"];

        if(Validation.IsValid()){
            var db = Database.Open("basicData");
            if (mainPhoto.Length == 0)
            {
                mainPhoto = "1";
            }
            if (robotText.Length == 0)
            {
                robotText = null;
            }
            var updateCommand = "UPDATE Robots SET RobotName=@0, RobotText=@1, PhotoId=@2 WHERE RobotId=@3";
            db.Execute(updateCommand, robotName, robotText, mainPhoto, robotId);
            db.Close();
            Response.Redirect(string.Format("~/Robot?id={0}", robotId));
        }
    }
    if(IsPost && !Request["submit2"].IsEmpty())
    {
        Response.Redirect(string.Format("~/Admin/Tools/ViewParts?id={0}", robotId));
    }
    if(IsPost && !Request["editCodeLink"].IsEmpty())
    {
        Validation.RequireField("input", "Please enter something");

        input = Request.Form["input"];
        element = Request.Form["element"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var updateCommand = "UPDATE CodeLinks SET link=@0 WHERE Id=@1";
            db.Execute(updateCommand, input, element);

            Response.Redirect(string.Format("~/Admin/Tools/EditRobot?id={0}", robotId));
        }
    }
    if(IsPost && !Request["deleteCodeLink"].IsEmpty())
    {
        element = Request.Form["element"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var deleteCommand = "DELETE FROM CodeLinks WHERE Id=@0";
            db.Execute(deleteCommand, element);

            Response.Redirect(string.Format("~/Admin/Tools/EditRobot?id={0}", robotId));
        }
    }
    if(IsPost && !Request["addCodeLink"].IsEmpty())
    {
        Validation.RequireField("input", "Please enter something");

        input = Request.Form["input"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var insertCommand = "INSERT INTO CodeLinks (RobotId, link) VALUES(@0,@1)";
            db.Execute(insertCommand, robotId, input);

            Response.Redirect(string.Format("~/Admin/Tools/EditRobot?id={0}", robotId));
        }
    }


    if(IsPost && !Request["editCodeSnippet"].IsEmpty())
    {
        Validation.RequireField("input", "Please enter something");

        input = Request.Form["input"];
        element = Request.Form["element"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var updateCommand = "UPDATE CodeSnippets SET Text=@0 WHERE Id=@1";
            db.Execute(updateCommand, input, element);

            Response.Redirect(string.Format("~/Admin/Tools/EditRobot?id={0}", robotId));
        }
    }
    if(IsPost && !Request["deleteCodeSnippet"].IsEmpty())
    {
        element = Request.Form["element"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var deleteCommand = "DELETE FROM CodeSnippets WHERE Id=@0";
            db.Execute(deleteCommand, element);

            Response.Redirect(string.Format("~/Admin/Tools/EditRobot?id={0}", robotId));
        }
    }
    if(IsPost && !Request["addCodeSnippet"].IsEmpty())
    {
        Validation.RequireField("input", "Please enter something");

        input = Request.Form["input"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var insertCommand = "INSERT INTO CodeSnippets (RobotId, Text) VALUES(@0,@1)";
            db.Execute(insertCommand, robotId, input);

            Response.Redirect(string.Format("~/Admin/Tools/EditRobot?id={0}", robotId));
        }
    }


    if(IsPost && !Request["editThreeDLink"].IsEmpty())
    {
        Validation.RequireField("input", "Please enter something");

        input = Request.Form["input"];
        element = Request.Form["element"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var updateCommand = "UPDATE ThreeDFiles SET link=@0 WHERE Id=@1";
            db.Execute(updateCommand, input, element);

            Response.Redirect(string.Format("~/Admin/Tools/EditRobot?id={0}", robotId));
        }
    }
    if(IsPost && !Request["deleteThreeDLink"].IsEmpty())
    {
        element = Request.Form["element"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var deleteCommand = "DELETE FROM ThreeDFiles WHERE Id=@0";
            db.Execute(deleteCommand, element);

            Response.Redirect(string.Format("~/Admin/Tools/EditRobot?id={0}", robotId));
        }
    }
    if(IsPost && !Request["addThreeDLink"].IsEmpty())
    {
        Validation.RequireField("input", "Please enter something");

        input = Request.Form["input"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var insertCommand = "INSERT INTO ThreeDFiles (RobotId, link) VALUES(@0,@1)";
            db.Execute(insertCommand, robotId, input);

            Response.Redirect(string.Format("~/Admin/Tools/EditRobot?id={0}", robotId));
        }
    }


    if(IsPost && !Request["editVideoLink"].IsEmpty())
    {
        Validation.RequireField("input", "Please enter something");

        input = Request.Form["input"];
        element = Request.Form["element"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var updateCommand = "UPDATE VideoLinks SET link=@0 WHERE Id=@1";
            db.Execute(updateCommand, input, element);

            Response.Redirect(string.Format("~/Admin/Tools/EditRobot?id={0}", robotId));
        }
    }
    if(IsPost && !Request["deleteVideoLink"].IsEmpty())
    {
        element = Request.Form["element"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var deleteCommand = "DELETE FROM VideoLinks WHERE Id=@0";
            db.Execute(deleteCommand, element);

            Response.Redirect(string.Format("~/Admin/Tools/EditRobot?id={0}", robotId));
        }
    }
    if(IsPost && !Request["addVideoLink"].IsEmpty())
    {
        Validation.RequireField("input", "Please enter something");

        input = Request.Form["input"];

        if(Validation.IsValid())
        {
            var db = Database.Open("basicData");
            var insertCommand = "INSERT INTO VideoLinks (RobotId, link) VALUES(@0,@1)";
            db.Execute(insertCommand, robotId, input);

            Response.Redirect(string.Format("~/Admin/Tools/EditRobot?id={0}", robotId));
        }
    }

    Page.Title = String.Format("Edit {0}", robotName);
}



<div class="col-md-12">
<h1>Edit robot</h1>
    <form method="post" class="form-inline"> @* mist nog form ID *@
        <fieldset>
            @AntiForgery.GetHtml()
            @Html.ValidationSummary("Login was unsuccessful. Please correct the errors and try again", excludeFieldErrors: true, htmlAttributes: null)
            <div class="form-group">
                <label for="robotName">Name</label></br>
                <input type="text" id="name" name="name" value="@robotName" class="form-control">
                @Html.ValidationMessage("name")
            </div>
        </fieldset>
        <fieldset>
            <div class="form-group">
                <label for="robotText">Text</label></br>
                <textarea onkeyup="textCounter(this, 'counter',4000);" id="robotText" name="robotText" class="form-control" rows="8">@robotText</textarea>
                @*<textarea id="robotDescription" name="robotDescription" class="form-control">@robotDescription</textarea>*@
                    @Html.ValidationMessage("robotText")
            </div>
        </fieldset>
        <fieldset>
            <label>Pick a cover image</label></br>
            @foreach (var photo in photos)
            {
                <div class="form-group">
                    <input type="radio" id="photo" name="photo" value="@photo.Substring(23)" class="form-control">
                    <img src="~/@photo" alt="photo" width="250px" height="250px" />
                </div>
            }
        </fieldset>
        <fieldset>
            <div class="form-group">
                <input type="submit" id="submit" name="submit1" value="Edit" class="btn btn-default">
            </div>
        </fieldset>
    </form>
    <form method="post" class="form-inline">
        <fieldset>
            <label>Edit parts for this Robot</label></br>
            <div class="form-group">
                <input type="submit" id="submit" name="submit2" value="Parts" class="btn btn-default">
            </div>
        </fieldset>
    </form>

    <div class="container">
        <h2>Links</h2>
        <ul class="nav nav-tabs">
            @for (int i = 1; i <= codeLinks.Count; i++)
            {
                <li><a data-toggle="tab" href="#Link_@i">@i</a></li>
            }
        </ul>

        <div class="tab-content">
            @for (int i = 1; i <= codeLinks.Count; i++)
            {
                <div id="Link_@i" class="tab-pane fade">
                    <form method="post" class="form-inline">
                        <div class="form-group">
                            <input type="text" id="input" name="input" value="@codeLinks[i-1][1]" class="form-control">
                            <input type="hidden" name="element" value="@codeLinks[i-1][0]">
                            <input type="submit" id="submit" name="editCodeLink" value="Edit" class="btn btn-default">
                            <input type="submit" id="submit" name="deleteCodeLink" value="Delete" class="btn btn-default">
                        </div>
                    </form>
                </div>
            }
        </div>
        <form method="post" class="form-inline">
            @AntiForgery.GetHtml()
            @Html.ValidationSummary("Login was unsuccessful. Please correct the errors and try again", excludeFieldErrors: true, htmlAttributes: null)
            <div class="form-group">
                <input type="text" id="input" name="input" value="" class="form-control">
                <input type="submit" id="submit" name="addCodeLink" value="Add" class="btn btn-default">
                @Html.ValidationMessage("input")
            </div>
        </form>
    </div>


    <div class="container">
        <h2>Code snippets</h2>
        <ul class="nav nav-tabs">
            @for (int i = 1; i <= codeSnippets.Count; i++)
            {
                <li><a data-toggle="tab" href="#Snippet_@i">@i</a></li>
            }
        </ul>

        <div class="tab-content">
            @for (int i = 1; i <= codeSnippets.Count; i++)
            {
                <div id="Snippet_@i" class="tab-pane fade">
                    <form method="post" class="form-inline">
                        <div class="form-group">
                            <textarea onkeyup="textCounter(this, 'counter',4000);" id="input" name="input" class="form-control" rows="8">@codeSnippets[i-1][1]</textarea>
                            <input type="hidden" name="element" value="@codeSnippets[i-1][0]">
                            <input type="submit" id="submit" name="editCodeSnippet" value="Edit" class="btn btn-default">
                            <input type="submit" id="submit" name="deleteCodeSnippet" value="Delete" class="btn btn-default">
                        </div>
                    </form>
                </div>
            }
        </div>
        <form method="post" class="form-inline">
            @AntiForgery.GetHtml()
            @Html.ValidationSummary("Login was unsuccessful. Please correct the errors and try again", excludeFieldErrors: true, htmlAttributes: null)
            <div class="form-group">
                <textarea onkeyup="textCounter(this, 'counter',4000);" id="input" name="input" class="form-control" rows="8"></textarea>
                <input type="submit" id="submit" name="addCodeSnippet" value="Add" class="btn btn-default">
                @Html.ValidationMessage("input")
            </div>
        </form>
    </div>


    <div class="container">
        <h2>3D links</h2>
        <ul class="nav nav-tabs">
            @for (int i = 1; i <= threeDLinks.Count; i++)
            {
                <li><a data-toggle="tab" href="#ThreeD_@i">@i</a></li>
            }
        </ul>

        <div class="tab-content">
            @for (int i = 1; i <= threeDLinks.Count; i++)
            {
                <div id="ThreeD_@i" class="tab-pane fade">
                    <form method="post" class="form-inline">
                        <div class="form-group">
                            <input type="text" id="input" name="input" value="@threeDLinks[i-1][1]" class="form-control">
                            <input type="hidden" name="element" value="@threeDLinks[i-1][0]">
                            <input type="submit" id="submit" name="editThreeDLink" value="Edit" class="btn btn-default">
                            <input type="submit" id="submit" name="deleteThreeDLink" value="Delete" class="btn btn-default">
                        </div>
                    </form>
                </div>
            }
        </div>
        <form method="post" class="form-inline">
            @AntiForgery.GetHtml()
            @Html.ValidationSummary("Login was unsuccessful. Please correct the errors and try again", excludeFieldErrors: true, htmlAttributes: null)
            <div class="form-group">
                <input type="text" id="input" name="input" value="" class="form-control">
                <input type="submit" id="submit" name="addThreeDLink" value="Add" class="btn btn-default">
                @Html.ValidationMessage("input")
            </div>
        </form>
    </div>


    <div class="container">
        <h2>Video links</h2>
        <ul class="nav nav-tabs">
            @for (int i = 1; i <= videoLinks.Count; i++)
            {
                <li><a data-toggle="tab" href="#Video_@i">@i</a></li>
            }
        </ul>

        <div class="tab-content">
            @for (int i = 1; i <= videoLinks.Count; i++)
            {
                <div id="Video_@i" class="tab-pane fade">
                    <form method="post" class="form-inline">
                        <div class="form-group">
                            <input type="text" id="input" name="input" value="@videoLinks[i-1][1]" class="form-control">
                            <input type="hidden" name="element" value="@videoLinks[i-1][0]">
                            <input type="submit" id="submit" name="editVideoLink" value="Edit" class="btn btn-default">
                            <input type="submit" id="submit" name="deleteVideoLink" value="Delete" class="btn btn-default">
                        </div>
                    </form>
                </div>
            }
        </div>
        <form method="post" class="form-inline">
            @AntiForgery.GetHtml()
            @Html.ValidationSummary("Login was unsuccessful. Please correct the errors and try again", excludeFieldErrors: true, htmlAttributes: null)
            <div class="form-group">
                <input type="text" id="input" name="input" value="" class="form-control">
                <input type="submit" id="submit" name="addVideoLink" value="Add" class="btn btn-default">
                @Html.ValidationMessage("input")
            </div>
        </form>
    </div>
</div>
