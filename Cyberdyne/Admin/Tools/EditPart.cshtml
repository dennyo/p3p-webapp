@using System.IO
@{
    Page.Title = "Edit Part";
    Layout = "~/_Layout.cshtml";
    
    var partId = "";
    var partName = "";
    var partNo = "";
    int quantity = 0;
    bool isPart = false;
    bool partEdit = false;
    bool isRobot = false;
    var robotId = Request.QueryString["RobotId"];
    int editPartId = 0;


    Repository.Part tempPart = new Repository.Part(0, "N/A", "N/A", 1);
    var db = Database.Open(App.DataBase);
    List<Repository.Vendor> Vendors = new List<Repository.Vendor>();

    if(!robotId.IsEmpty() && robotId.IsInt())
    {
        var queryData = db.QuerySingle("SELECT RobotId FROM Robots WHERE RobotId = @0", robotId);
        if(queryData != null)
        {
            isRobot = true;
            robotId = Request.QueryString["RobotId"];
        }
    }

    if(!Request.QueryString["ID"].IsEmpty() && Request.QueryString["ID"].IsInt()) 
    {
        partId = Request.QueryString["ID"];
        tempPart = Repository.getPart(Convert.ToInt16(partId));
        Vendors = tempPart.getVendors();

        if (tempPart != null)
        {
            partName = tempPart.PartName;
            partNo = tempPart.PartNo;
            if(isRobot)
            {
                quantity = tempPart.getQuantity(Convert.ToInt32(robotId));
            }
            isPart = true;
        }
        else
        {
            Validation.AddFormError("The part you requested is lost.");
        }
        
        //Post checks
        if(IsPost && Request.Form["submitPartName"] != null)
        {
            Validation.RequireField("partName", "You must enter a part name");
            Validation.Add("partName",
                Validator.StringLength(
                maxLength: 400,
                minLength: 1,
                errorMessage: "Part name cannot contain more than 400 characters"));
            if(Validation.IsValid())
            {
                partName = Request.Form["partName"];
                tempPart.PartName = partName;
            }
        }

        if(IsPost && Request.Form["submitPartNo"] != null)
        {
            Validation.Add("partNo", 
                Validator.StringLength(
                maxLength: 400,
                minLength: 0,
                errorMessage: "Serial number cannot contain more than 400 characters"));

            if(Validation.IsValid())
            {
                partNo = Request.Form["partNo"];
                tempPart.PartNo = partNo;
            }
        }

        if(IsPost && Request.Form["submitQuantity"] != null)
        {
            Validation.Add("quantity", 
                Validator.Integer("This is not a valid number"));

            if(Validation.IsValid())
            {
                quantity = Convert.ToInt32(Request.Form["quantity"]);
                tempPart.setQuantity(Convert.ToInt32(robotId), quantity);
            }
        }

        if(IsPost && Request.Form["submitVendor"] != null)
        {
            Validation.RequireField("vendorName", "You need to enter a Vendor Name");
            Validation.Add("vendorName",
                Validator.StringLength(
                    maxLength: 400,
                    minLength: 1,
                    errorMessage: "The Name must be 400 characters at most")
            );
            Validation.Add("vendorLink",
                Validator.StringLength(
                    maxLength: 400,
                    errorMessage: "The link cannot be longer than 400 characters")
            );
            Validation.Add("price",
                Validator.Float("This is not a number")
            );
            Validation.Add("purchaseLink",
            Validator.StringLength(
                    maxLength: 400,
                    errorMessage: "The link cannot be longer than 400 characters")
            );

            if(Validation.IsValid())
            {
                var vendorName = Request.Form["vendorName"];
                var vendorLink = Request.Form["vendorLink"].ToLower();
                var price = Request.Form["price"].Replace(',', '.');
                var purchaseLink = Request.Form["purchaseLink"].ToLower();
                float floatPrice = 0;
                if(price != "")
                {
                    floatPrice = float.Parse(price);
                }
                var vendorQuery = db.QuerySingle("SELECT * FROM Vendors WHERE LOWER(VendorName) = LOWER(@0) AND PartId = @1", vendorName, partId);
                if(vendorQuery == null)
                {
                    tempPart.addVendor(vendorName, vendorLink, floatPrice, purchaseLink);
                    db.Close();
                    Response.Redirect(Request.Url.AbsoluteUri);
                }
                else
                {
                    ModelState.AddFormError("This Vendor already exists, please edit the existing vendor");
                }
            }
        }

        if(IsPost && Request.Form["removeVendor"] != null)
        {
            AntiForgery.Validate();
            var removeId = Request.Form["removeVendorId"];
            db.Execute("DELETE FROM Vendors WHERE VendorId = @0", removeId);
            db.Close();
            Response.Redirect(Request.Url.AbsoluteUri);
        }

        if(IsPost && Request.Form["editVendor"] != null)
        {
            var editId = Request.Form["editVendorId"];
            if(editId.IsInt())
            {
                partEdit = true;
                editPartId = Convert.ToInt32(editId);
            }
        }
        if(IsPost && Request.Form["saveVendor"] != null)
        {
            AntiForgery.Validate();
            Validation.RequireField("vendorName", "You need to enter a Vendor Name");
            Validation.Add("vendorName",
                Validator.StringLength(
                    maxLength: 400,
                    minLength: 1,
                    errorMessage: "The Name must be 400 characters at most")
            );
            Validation.Add("vendorLink",
                Validator.StringLength(
                    maxLength: 400,
                    errorMessage: "The link cannot be longer than 400 characters")
            );
            Validation.Add("price",
                Validator.Float("This is not a number")
            );
            Validation.Add("purchaseLink",
            Validator.StringLength(
                    maxLength: 400,
                    errorMessage: "The link cannot be longer than 400 characters")
            );
            if(Validation.IsValid())
            {
                partEdit = false;
                var vendorId = Request.Form["vendorId"];
                Repository.Vendor tempVendor = Repository.getVendor(Convert.ToInt32(vendorId));
                tempVendor.Name = Request.Form["vendorName"];
                tempVendor.Link = Request.Form["vendorLink"];
                var price = Request.Form["price"].Replace(',', '.');
                tempVendor.PurchaseLink = Request.Form["purchaseLink"];
                if(price != "")
                {
                    tempVendor.Price = float.Parse(price);
                }
                db.Close();
                Response.Redirect(Request.Url.AbsoluteUri);
            }
        }

        if(IsPost && Request.Form["addPhoto"] != null)
        {
            var uploadedPhoto = Request.Files[0];
            var fileName = Path.GetFileName(uploadedPhoto.FileName);
            if(fileName != string.Empty)
            {
                var fileType = uploadedPhoto.ContentType;
                if(fileType.StartsWith("image"))
                {
                    var fileStream = uploadedPhoto.InputStream;
                    var fileLenght = uploadedPhoto.ContentLength;
                    if(fileLenght <= 4000000)
                    {
                        byte[] fileContent = new byte[fileLenght];
                        fileStream.Read(fileContent, 0, fileLenght);
                        db.Execute("INSERT INTO Photos (Photo, MimeType) VALUES (@0, @1)", fileContent, fileType);
                        int newPhotoId = (int)db.GetLastInsertId();
                        tempPart.CoverPhoto = newPhotoId;
                        db.Close();
                        Response.Redirect(Request.Url.AbsoluteUri);
                    }
                    else
                    {
                        //give error that file is too big
                        ModelState.AddError("addPhoto", "The file cannot be larger than 4MB");
                    }
                }
            }
        }
    }
    else
    {
        Validation.AddFormError("The part you requested is lost.");
    }   
    db.Close();
}



<div class="col-md-12">
    <h1>Edit part</h1>

    @if(isPart)
    {
        <div class="row">
            @if(isRobot)
            {
                <div class="col-xs-6 col-sm-2">
                    <a href="~/Admin/Tools/ViewParts?Id=@robotId" class="btn btn-primary btn-block floatBtn"><span class="glyphicon glyphicon-arrow-left"></span> Back</a>
                </div> 
            }
            else
            {
                <div class="col-xs-6 col-sm-2">
                    <a href="~/Admin/Tools/ViewParts" class="btn btn-primary btn-block floatBtn"><span class="glyphicon glyphicon-arrow-left"></span> Back</a>
                </div>    
            }
            <div class="col-xs-6  col-sm-offset-8 col-sm-2 floatBtn">
                <a href="@Request.Url.AbsoluteUri" class="btn btn-success btn-block"><span class="glyphicon glyphicon-refresh"></span></a>
            </div>
        </div>
        <br>
        <div class="row">
            <div class="col-md-6">
                <div class="row">
                    <form method="post" class="form-group">
                        <fieldset>
                            @AntiForgery.GetHtml()

                            <label for="partName">Name: @partName</label>
                            <div class="form-inline">
                                <input type="text" id="partName" name="partName" value="@partName" class="form-control form-width-override">
                                <input type="submit" id="submit" name="submitPartName" value="Edit" class="btn btn-info">
                            </div>
                            @Html.ValidationMessage("partName")
                        </fieldset>
                    </form>


                    <form method="post" class="form-group">
                        <fieldset>
                            @AntiForgery.GetHtml()

                            <label for="partNo">Part Number: @partNo</label>
                            <div class="form-inline">
                                <input type="text" id="partNo" name="partNo" value="@partNo" class="form-control form-width-override">
                                <input type="submit" id="submit" name="submitPartNo" value="Edit" class="btn btn-info">
                            </div>
                            @Html.ValidationMessage("partNo")
                        </fieldset>
                    </form>

                    @if(isRobot)
                    {
                        <form method="post" class="form-group">
                            <fieldset>
                                @AntiForgery.GetHtml()
                                <h2>This quantity corresponds to robot: @Repository.getRobot(Convert.ToInt32(robotId)).RobotName</h2>
                                <label for="quantity">Quantity: @quantity</label>
                                <div class="form-inline">
                                    <input type="text" id="quantity" name="quantity" value="@quantity" class="form-control form-width-override">
                                    <input type="submit" id="submitQuantity" name="submitQuantity" value="Edit" class="btn btn-info">
                                </div>
                                @Html.ValidationMessage("quantity")
                            </fieldset>
                        </form>
                    }
                </div>
            </div>
            <div class="col-md-6">
                <div class="row">
                    <img src="@App.Thumbnail@tempPart.CoverPhoto" width="auto" height="100px" alt="photo"/>
                    <form method="post" enctype="multipart/form-data" class="form-group">
                        @Html.ValidationSummary()
                        @FileUpload.GetHtml(
                            initialNumberOfFiles: 1,
                            allowMoreFilesToBeAdded: false,
                            includeFormTag: false,
                            uploadText: "Upload"
                        )
                        <button type="submit" id="submit" name="addPhoto" class="btn btn-default">
                            <span class="glyphicon glyphicon-cloud-upload"></span> Upload
                        </button>
                    </form>   
                </div>
            </div>
        </div>
        
        
        <div class="row">
            @Html.ValidationSummary()
            <button type="button" class="btn btn-info" data-toggle="collapse" data-target="#addVendorCollapse">Add a Vendor</button>
            <div class="collapse" id="addVendorCollapse">
                <form method="post" class="form-group">
                    @AntiForgery.GetHtml()
                    <fieldset>
                        <h2>Add a Vendor</h2>
                        <div class="form-group">
                            <label for="vendorName">Vendor Name: </label>
                            <input type="text" id="vendorName" name="vendorName" class="form-control">
                            @Html.ValidationMessage("vendorName")
                        </div>
                        <div class="form-group">
                            <label for="vendorLink">Link to Vendor</label>
                            <input type="text" id="vendorLink" name="vendorLink" class="form-control">
                            @Html.ValidationMessage("vendorLink")
                        </div>
                        <div class="form-group">
                            <label for="price">Price</label>
                            <input type="text" id="price" name="price" class="form-control">
                            @Html.ValidationMessage("price")
                        </div>
                        <div class="form-group">
                            <label for="purchaseLink">Link To Product</label>
                            <input type="text" id="purchaseLink" name="purchaseLink" class="form-control">
                            @Html.ValidationMessage("purchaseLink")
                        </div>
                        <div class="form-group">
                            <button type="submit" name="submitVendor" class="btn btn-default">
                                <span class="glyphicon glyphicon-plus"></span> Add
                            </button>
                        </div>
                    </fieldset>
                </form>
            </div>
        </div>
        <br>
        <div class="panel panel-primary">
            <div class="panel-heading">Vendors</div>
            <div class="list-group">
                @foreach(Repository.Vendor vendor in Vendors)
                {
                    <div class="list-group-item">
                        <div class="row">
                            @if(!partEdit)
                            {
                                <div class="col-xs-12 col-md-2 col-sm-6">Name: @vendor.Name</div>
                                <div class="col-xs-12 col-md-2 col-sm-6">Vendor Link: @if(string.IsNullOrEmpty(vendor.Link)){
                                                                                        <text>No Link</text>
                                                                                      }else {                                                                                      
                                                                                          <a href="@vendor.Link" target="_blank"> Vendor</a>
                                                                                      }
                                </div>
                                <div class="col-xs-12 col-md-2 col-sm-6">Price: €@vendor.Price</div>
                                <div class="col-xs-12 col-md-2 col-sm-6">Purchase Link: @if(string.IsNullOrEmpty(vendor.PurchaseLink)){
                                                                                            <text>No Link</text>
                                                                                        } else {
                                                                                            <a href="@vendor.PurchaseLink" target="_blank">Buy here</a>
                                                                                        }
                                </div>  
                                <div class="col-xs-12 col-md-2 col-sm-6">
                                    <form method="post">
                                        @AntiForgery.GetHtml()
                                        <button type="submit" class="btn btn-warning" name="editVendor">
                                            <span class="glyphicon glyphicon-wrench"></span> Edit
                                        </button>
                                        <input type="hidden" name="editVendorId" value="@vendor.VendorId"/>
                                    </form>
                                </div> 
                                <div class="col-xs-12 col-md-2 col-sm-6">
                                    <form method="post">
                                        @AntiForgery.GetHtml()
                                        <button type="submit" class="btn btn-danger" name="removeVendor">
                                            <span class="glyphicon glyphicon-remove"></span> Remove
                                        </button>
                                        <input type="hidden" name="removeVendorId" value="@vendor.VendorId"/>
                                    </form>
                                </div>
                            }
                            else
                            {
                                <form method="post">
                                    @AntiForgery.GetHtml()
                                    <div class="col-xs-12 col-md-2 col-sm-6">
                                        <input type="text" name="vendorName" id="vendorName" class="form-control form-width-override" value="@vendor.Name">
                                        @Html.ValidationMessage("vendorName")
                                    </div>
                                    <div class="col-xs-12 col-md-2 col-sm-6">
                                        <input type="text" name="vendorLink" id="vendorLink" class="form-control form-width-override" value="@vendor.Link">
                                        @Html.ValidationMessage("vendorLink")
                                    </div>
                                    <div class="col-xs-12 col-md-2 col-sm-6">
                                        <input type="text" name="price" id="price" class="form-control form-width-override" value="@vendor.Price">
                                        @Html.ValidationMessage("price")
                                    </div>
                                    <div class="col-xs-12 col-md-2 col-sm-6">
                                        <input type="text" name="purchaseLink" id="purchaseLink" class="form-control form-width-override" value="@vendor.PurchaseLink">
                                        @Html.ValidationMessage("purchaseLink")
                                    </div>  
                                    <div class="col-xs-12 col-md-4 col-sm-4">
                                        <button type="submit" class="btn btn-success" name="saveVendor"><span class="glyphicon glyphicon-save"></span> Save</button>
                                    </div>
                                    <input type="hidden" name="vendorId" value="@vendor.VendorId">
                                </form>
                            }
                        </div>  
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        @Html.ValidationSummary()
    }
</div>